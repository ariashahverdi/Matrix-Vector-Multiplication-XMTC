	.xmtGlob vector_dim0_size 2644 4 	# Inserted by XMTCLinker
	.xmtGlob result_dim0_size 2848 4 	# Inserted by XMTCLinker
	.xmtGlob __xmtio_buffer 2852 458752 	# Inserted by XMTCLinker
	.xmtGlob rowptr_dim0_size 1352 4 	# Inserted by XMTCLinker
	.xmtGlob col_ind_dim0_size 1796 4 	# Inserted by XMTCLinker
	.xmtGlob __xmt_global_sp 461604 4 	# Inserted by XMTCLinker
	.xmtGlob col_ind 1356 440 	# Inserted by XMTCLinker
	.xmtGlob vector 2244 400 	# Inserted by XMTCLinker
	.xmtGlob values 1800 440 	# Inserted by XMTCLinker
	.xmtGlob values_dim0_size 2240 4 	# Inserted by XMTCLinker
	.xmtGlob result 2648 200 	# Inserted by XMTCLinker
	.xmtGlob rowptr 1148 204 	# Inserted by XMTCLinker
	.stackinit 0x3ffffffc
	lui $29 , 0x3fff
	addi $29 , $29 , 0xfffc
	jal _xmt_check_ntcus
	jal main
	halt
	.file	1 "xmtio.cil.c"
	.section .mdebug.abi32
	.previous
	.text
	.align	2
	.globl printCHAR
	.ent printCHAR 
 printCHAR :
	.frame $29 , 0 , $31 # vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	lui $2 , 1 # li expansion: li $2 , 65536
	ori $2 , $2 , 0
	ori $2 , $2 , 49150
	slt $6 , $2 , $5
	bltz $5 , $L5
	sll $3 , $5 , 2
	lui $2 , 0 # la expansion: la $2 , __xmtio_buffer + 4
	ori $2 , $2 , 2856
	addu $3 , $3 , $2
	bne $6 , $0 , $L5
	sw $4 , 0 ( $3 )
$L5 :
	jr $31 # Returning from frunction printCHAR
	.end printCHAR 
 	.size	printCHAR, .-printCHAR
	.align	2
	.globl __parallel_printCHAR
	.size	__parallel_printCHAR, .-__parallel_printCHAR
	.align	2
	.globl printINT
	.ent printINT 
 printINT :
	.frame $29 , 40 , $31 # vars= 0, regs= 6/0, args= 16, gp= 0
	.mask	0x801f0000,-4
	.fmask	0x00000000,0
	addiu $29 , $29 , - 40
	sw $31 , 36 ( $29 )
	sw $20 , 32 ( $29 )
	sw $19 , 28 ( $29 )
	sw $18 , 24 ( $29 )
	sw $17 , 20 ( $29 )
	sw $16 , 16 ( $29 )
	add $17 , $4 , $0 # expanded move: move $17 , $4
	add $18 , $5 , $0 # expanded move: move $18 , $5
	bltz $4 , $L13
	add $19 , $0 , $0 # expanded move: move $19 , $0
$L15 :
	addi $16 , $0 , 1 # li expansion: li $16 , 1
	j $L16
$L13 :
	bltz $5 , $L17
	addi $4 , $0 , 45 # li expansion: li $4 , 45
	jal printCHAR
	addiu $18 , $18 , 1
$L17 :
	subu $17 , $0 , $17
	addi $19 , $0 , 1 # li expansion: li $19 , 1
	j $L15
$L19 :
	addu $16 , $3 , $4
$L16 :
	div $17 , $16
	mflo $2
	sll $4 , $16 , 3
	sll $3 , $16 , 1
	slti $2 , $2 , 10
	beq $2 , $0 , $L19
	lui $2 , 26214 # li expansion: li $2 , 1717960704
	ori $2 , $2 , 0
	ori $20 , $2 , 26215
	j $L20
$L21 :
	addiu $19 , $19 , 1
	bltz $18 , $L22
	div $17 , $16
	mflo $4
	addiu $18 , $18 , 1
	addiu $4 , $4 , 48
	jal printCHAR
$L22 :
	mult $16 , $20
	mfhi $2
	sra $3 , $16 , 31
	div $17 , $16
	mfhi $17
	sra $2 , $2 , 2
	subu $16 , $2 , $3
$L20 :
	add $5 , $18 , $0 # expanded move: move $5 , $18
	bgtz $16 , $L21
	add $2 , $19 , $0 # expanded move: move $2 , $19
	lw $31 , 36 ( $29 )
	lw $20 , 32 ( $29 )
	lw $19 , 28 ( $29 )
	lw $18 , 24 ( $29 )
	lw $17 , 20 ( $29 )
	lw $16 , 16 ( $29 )
	addiu $29 , $29 , 40
	jr $31 # Returning from frunction printINT
	.end printINT 
 	.size	printINT, .-printINT
	.align	2
	.globl __parallel_printINT
	.size	__parallel_printINT, .-__parallel_printINT
	.align	2
	.globl printSTR
	.ent printSTR 
 printSTR :
	.frame $29 , 32 , $31 # vars= 0, regs= 4/0, args= 16, gp= 0
	.mask	0x80070000,-4
	.fmask	0x00000000,0
	addiu $29 , $29 , - 32
	sw $31 , 28 ( $29 )
	sw $18 , 24 ( $29 )
	sw $17 , 20 ( $29 )
	sw $16 , 16 ( $29 )
	add $17 , $5 , $0 # expanded move: move $17 , $5
	add $16 , $4 , $0 # expanded move: move $16 , $4
	add $18 , $0 , $0 # expanded move: move $18 , $0
	j $L51
$L46 :
	addiu $18 , $18 , 1
	bltz $17 , $L51
	jal printCHAR
	addiu $17 , $17 , 1
$L51 :
	addi $2 , $16 , 0 # epxanded load instruction (start)
	andi $27 , $2 , 3
	xor $2 , $2 , $27
	lw $2 , 0 ( $2 )
	addi $26 , $0 , 24 # li expansion: li $26 , 24
	sll $27 , $27 , 3
	sub $27 , $26 , $27
	sllv $2 , $2 , $27
	srav $2 , $2 , $26 # epxanded load instruction (end)
	add $5 , $17 , $0 # expanded move: move $5 , $17
	add $4 , $2 , $0 # expanded move: move $4 , $2
	addiu $16 , $16 , 1
	bne $2 , $0 , $L46
	add $2 , $18 , $0 # expanded move: move $2 , $18
	lw $31 , 28 ( $29 )
	lw $18 , 24 ( $29 )
	lw $17 , 20 ( $29 )
	lw $16 , 16 ( $29 )
	addiu $29 , $29 , 32
	jr $31 # Returning from frunction printSTR
	.end printSTR 
 	.size	printSTR, .-printSTR
	.align	2
	.globl __parallel_printSTR
	.size	__parallel_printSTR, .-__parallel_printSTR
	.align	2
	.globl printf_internal
	.ent printf_internal 
 printf_internal :
	.frame $29 , 40 , $31 # vars= 0, regs= 6/0, args= 16, gp= 0
	.mask	0x801f0000,-4
	.fmask	0x00000000,0
	addiu $29 , $29 , - 40
	sw $31 , 36 ( $29 )
	sw $20 , 32 ( $29 )
	sw $19 , 28 ( $29 )
	sw $18 , 24 ( $29 )
	sw $17 , 20 ( $29 )
	sw $16 , 16 ( $29 )
	add $16 , $4 , $0 # expanded move: move $16 , $4
	add $20 , $5 , $0 # expanded move: move $20 , $5
	add $19 , $6 , $0 # expanded move: move $19 , $6
	add $18 , $0 , $0 # expanded move: move $18 , $0
	add $17 , $0 , $0 # expanded move: move $17 , $0
	j $L65
$L66 :
	addi $2 , $0 , 37 # li expansion: li $2 , 37
	bne $4 , $2 , $L87
	addiu $17 , $17 , 1
	addu $2 , $20 , $17
	addi $3 , $2 , 0 # epxanded load instruction (start)
	andi $27 , $3 , 3
	xor $3 , $3 , $27
	lw $3 , 0 ( $3 )
	addi $26 , $0 , 24 # li expansion: li $26 , 24
	sll $27 , $27 , 3
	sub $27 , $26 , $27
	sllv $3 , $3 , $27
	srav $3 , $3 , $26 # epxanded load instruction (end)
	addi $2 , $0 , 100 # li expansion: li $2 , 100
	beq $3 , $2 , $L74
	slti $2 , $3 , 101
	beq $2 , $0 , $L76
	beq $3 , $4 , $L72
	addi $2 , $0 , 99 # li expansion: li $2 , 99
	bne $3 , $2 , $L71
	j $L88
$L76 :
	addi $2 , $0 , 115 # li expansion: li $2 , 115
	bne $3 , $2 , $L71
	j $L89
$L74 :
	lw $4 , 0 ( $19 )
	add $5 , $16 , $0 # expanded move: move $5 , $16
	jal printINT
	addiu $19 , $19 , 4
	addu $18 , $18 , $2
	bgez $16 , $L85
	j $L71
$L89 :
	lw $4 , 0 ( $19 )
	add $5 , $16 , $0 # expanded move: move $5 , $16
	jal printSTR
	addiu $19 , $19 , 4
	addu $18 , $18 , $2
	bltz $16 , $L71
$L85 :
	addu $16 , $16 , $2
	j $L71
$L88 :
	lw $4 , 0 ( $19 )
	addiu $19 , $19 , 4
$L87 :
	bltz $16 , $L81
	add $5 , $16 , $0 # expanded move: move $5 , $16
	jal printCHAR
	addiu $16 , $16 , 1
	j $L81
$L72 :
	bltz $16 , $L81
	add $5 , $16 , $0 # expanded move: move $5 , $16
	addi $4 , $0 , 37 # li expansion: li $4 , 37
	jal printCHAR
	addiu $16 , $16 , 1
$L81 :
	addiu $18 , $18 , 1
$L71 :
	addiu $17 , $17 , 1
$L65 :
	addu $2 , $17 , $20
	addi $4 , $2 , 0 # epxanded load instruction (start)
	andi $27 , $4 , 3
	xor $4 , $4 , $27
	lw $4 , 0 ( $4 )
	addi $26 , $0 , 24 # li expansion: li $26 , 24
	sll $27 , $27 , 3
	sub $27 , $26 , $27
	sllv $4 , $4 , $27
	srav $4 , $4 , $26 # epxanded load instruction (end)
	bne $4 , $0 , $L66
	add $2 , $18 , $0 # expanded move: move $2 , $18
	lw $31 , 36 ( $29 )
	lw $20 , 32 ( $29 )
	lw $19 , 28 ( $29 )
	lw $18 , 24 ( $29 )
	lw $17 , 20 ( $29 )
	lw $16 , 16 ( $29 )
	addiu $29 , $29 , 40
	jr $31 # Returning from frunction printf_internal
	.end printf_internal 
 	.size	printf_internal, .-printf_internal
	.align	2
	.globl __parallel_printf_internal
	.size	__parallel_printf_internal, .-__parallel_printf_internal
	.align	2
	.globl printf
	.ent printf 
 printf :
	.frame $29 , 40 , $31 # vars= 8, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-8
	.fmask	0x00000000,0
	addiu $29 , $29 , - 40
	sw $31 , 32 ( $29 )
	sw $17 , 28 ( $29 )
	sw $16 , 24 ( $29 )
	add $17 , $4 , $0 # expanded move: move $17 , $4
	addiu $16 , $29 , 44
	sw $5 , 44 ( $29 )
	sw $6 , 48 ( $29 )
	addi $4 , $0 , - 1 # li expansion: li $4 , - 1
	add $5 , $17 , $0 # expanded move: move $5 , $17
	add $6 , $16 , $0 # expanded move: move $6 , $16
	sw $7 , 52 ( $29 )
	sw $16 , 16 ( $29 )
	jal printf_internal
	#APP

	lui $28 , 0 # la expansion: la $28 , __xmtio_buffer
	ori $28 , $28 , 2852
	lw $27 , 0 ( $28 )
	add $2 , $2 , $27
	sw $2 , 0 ( $28 )
	addi $2 , $27 , 0 # epxanded psm in serial mode (end)
	#NO_APP
	add $4 , $2 , $0 # expanded move: move $4 , $2
	add $5 , $17 , $0 # expanded move: move $5 , $17
	add $6 , $16 , $0 # expanded move: move $6 , $16
	sw $16 , 16 ( $29 )
	jal printf_internal
	lw $31 , 32 ( $29 )
	lw $17 , 28 ( $29 )
	lw $16 , 24 ( $29 )
	addiu $29 , $29 , 40
	jr $31 # Returning from frunction printf
	.end printf 
 	.size	printf, .-printf
	.align	2
	.globl __parallel_printf
	.size	__parallel_printf, .-__parallel_printf

	
	.ident	"GCC: (GNU) 4.0.2"
	.file	1 "xmtc.cil.c"
	.section .mdebug.abi32
	.previous
	.rdata
	.align	2
$LC0 :
	.ascii "ERROR: _XMT_NTUCS=%d but system has %d TCUs\012\000"
	.text
	.align	2
	.globl _xmt_check_ntcus
	.ent _xmt_check_ntcus 
 _xmt_check_ntcus :
	.frame $29 , 24 , $31 # vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	addiu $29 , $29 , - 24
	sw $31 , 16 ( $29 )
	#APP
	getid $6 , $0
	#NO_APP
	addi $2 , $0 , 64 # li expansion: li $2 , 64
	beq $6 , $2 , $L4
	lui $4 , 0 # la expansion: la $4 , $LC0
	ori $4 , $4 , 888
	addi $5 , $0 , 64 # li expansion: li $5 , 64
	jal printf
	#APP
	halt
	#NO_APP
$L4 :
	lw $31 , 16 ( $29 )
	addiu $29 , $29 , 24
	jr $31 # Returning from frunction _xmt_check_ntcus
	.end _xmt_check_ntcus 
 	.size	_xmt_check_ntcus, .-_xmt_check_ntcus
	.align	2
	.globl __parallel__xmt_check_ntcus
	.size	__parallel__xmt_check_ntcus, .-__parallel__xmt_check_ntcus

	
	.ident	"GCC: (GNU) 4.0.2"
	.file	1 "matvec.s.cil.c"
	.section .mdebug.abi32
	.previous
	.text
	.align	2
	.globl main
	.ent main 
 main :
	.frame $29 , 0 , $31 # vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	lui $7 , 0 # la expansion: la $7 , result
	ori $7 , $7 , 2648
	lui $10 , 0 # la expansion: la $10 , rowptr
	ori $10 , $10 , 1148
	lui $13 , 0 # la expansion: la $13 , result + 200
	ori $13 , $13 , 2848
	lui $11 , 0 # la expansion: la $11 , col_ind
	ori $11 , $11 , 1356
	lui $12 , 0 # la expansion: la $12 , values
	ori $12 , $12 , 1800
	j $L2
$L3 :
	sw $0 , 0 ( $7 )
	lw $6 , 0 ( $10 )
	lw $8 , 4 ( $10 )
	sll $2 , $6 , 2
	addu $5 , $2 , $11
	addu $4 , $2 , $12
	lui $9 , 0 # la expansion: la $9 , vector
	ori $9 , $9 , 2244
	j $L4_0
$L5_0 :
	lw $2 , - 4 ( $5 )
	sll $2 , $2 , 2
	addu $2 , $2 , $9
	lw $3 , - 4 ( $4 )
	lw $2 , 0 ( $2 )
	mult $3 , $2
	mflo $3
	lw $2 , 0 ( $7 )
	addu $3 , $3 , $2
	sw $3 , 0 ( $7 )
	addiu $6 , $6 , 1
$L4_0 :
	addiu $5 , $5 , 4
	addiu $4 , $4 , 4
	slt $2 , $6 , $8
	bne $2 , $0 , $L5_0
	addiu $7 , $7 , 4
	addiu $10 , $10 , 4
$L2 :
	bne $7 , $13 , $L3
	add $2 , $0 , $0 # expanded move: move $2 , $0
	jr $31 # Returning from frunction main
	.end main 
 	.size	main, .-main
	.align	2
	.globl __parallel_main
	.size	__parallel_main, .-__parallel_main
	.ident	"GCC: (GNU) 4.0.2"
	.globl pop_stacklet
	.size	pop_stacklet, . -pop_stacklet
	.align 2
